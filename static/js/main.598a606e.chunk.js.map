{"version":3,"sources":["donate.js","App.js","serviceWorker.js","index.js"],"names":["donate","Table","striped","bordered","hover","variant","App","useState","latest","setLatest","results","setResults","USA","setCases","searchCountries","setSearchCountries","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","includes","map","i","Card","key","bg","text","className","style","margin","Img","src","countryInfo","flag","Body","Title","Text","cases","deaths","recovered","todayCases","todayDeaths","active","critical","Navbar","collapseOnSelect","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Badge","Alert","Container","CardDeck","Footer","Form","Group","controlId","Label","Control","type","placeholder","onChange","e","target","value","queries","columns","query","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.598a606e.chunk.js","sourcesContent":["import React from 'react';\r\nimport $ from 'jquery';\r\nimport Table from 'react-bootstrap/Table' \r\nfunction donate(){\r\n    return(\r\n        <Table striped bordered hover variant=\"dark\">\r\n  <thead>\r\n    <tr>\r\n      <th>Donate With Crypto</th>\r\n      <th>Address</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>BTC</td>\r\n      <td>Coming Soon</td>\r\n    </tr>\r\n    <tr>\r\n      <td>ETH</td>\r\n      <td>Coming Soon</td>\r\n    </tr>\r\n    <tr>\r\n      <td>LTC</td>\r\n      <td>Coming Soon</td>\r\n    </tr>\r\n  </tbody>\r\n</Table>\r\n    );\r\n}\r\n\r\nexport default donate;","import React, { useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\nimport CardColumns from \"react-bootstrap/CardColumns\";\nimport Columns from \"react-columns\";\nimport Form from \"react-bootstrap/Form\";\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport './App.css';\nimport donate from './donate';\nimport {Route, Link} from 'react-router-dom'\nimport Container from 'react-bootstrap/Container'\nimport Alert from 'react-bootstrap/Alert'\nimport Badge from 'react-bootstrap/Badge'\n\nfunction App() {\n  const [latest, setLatest] = useState([]);\n  const [results, setResults] = useState([]);\n  const [USA, setCases] = useState([]);\n  const [searchCountries, setSearchCountries] = useState(\"\");\n  useEffect(() => {\n    axios\n     .all([\n       axios.get(\"https://corona.lmao.ninja/v2/all\"),\n       axios.get(\"https://corona.lmao.ninja/v2/countries\"),\n       axios.get(\"https://corona.lmao.ninja/v2/countries/USA\")\n     ])\n     .then(responseArr => {\n       setLatest(responseArr[0].data);\n       setResults(responseArr[1].data)\n       setCases(responseArr[2].data)\n     })\n     .catch(err => {\n       console.log(err)\n     });\n  }, []);\n\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n\n  const filterCountries = results.filter(item => {\n    return searchCountries !== \"\" ? item.country.includes(searchCountries) : item;\n  });\n\n  const countries = filterCountries.map((data, i) => {\n    return (\n      <Card key={i} bg=\"light\" text=\"dark\" className=\"text-center\" style={{margin: \"10px\"}}>\n        <Card.Img variant=\"top\" src={data.countryInfo.flag} />\n        <Card.Body>\n          <Card.Title>{data.country}</Card.Title>\n          <Card.Text>Cases {data.cases}</Card.Text>\n          <Card.Text>Deaths {data.deaths}</Card.Text>\n          <Card.Text>Recovered {data.recovered}</Card.Text>\n          <Card.Text>Today's Cases {data.todayCases}</Card.Text>\n          <Card.Text>Today's Deaths {data.todayDeaths}</Card.Text>\n          <Card.Text>Active {data.active}</Card.Text>\n          <Card.Text>Critical {data.critical}</Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  });\n\n\n\n  var queries = [{\n    columns: 2,\n    query: 'min-width: 500px'\n  }, {\n    columns: 3,\n    query: 'min-width: 1000px'\n\n  }];\n  return (\n    <div>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n  <Navbar.Brand href=\"./\">Covid 19 Tracker</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#features\">Home</Nav.Link>\n      <Nav.Link href=\"#donate\">Donate</Nav.Link>\n      <Nav.Link href=\"https://github.com/sell/covid-Tracker\">Github <Badge variant=\"success\">Source Code</Badge> </Nav.Link>\n    </Nav>\n  </Navbar.Collapse>\n</Navbar>\n      <div className=\"body\">\n      <Alert className=\"container\" variant=\"danger\">\n        United States Currently has the most cases with {USA.cases}\n      </Alert>\n      <Container>\n      <CardDeck>\n        <Card className=\"text-center\" bg=\"secondary\" text=\"white\" style={{margin: \"10px\"}}>\n          <Card.Body>\n            <Card.Title>Total Cases</Card.Title>\n              <Card.Text>\n                {latest.cases}\n              </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        <Card className=\"text-center\" bg=\"danger\" text={\"white\"} style={{margin: \"10px\"}}>\n          <Card.Body>\n            <Card.Title>Total Deaths</Card.Title>\n              <Card.Text>\n                {latest.deaths}\n              </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        <Card className=\"text-center\" bg=\"success\" text={\"white\"} style={{margin: \"10px\"}}>\n          <Card.Body>\n            <Card.Title>Total Recovered</Card.Title>\n              <Card.Text>\n                {latest.recovered}\n              </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n      </CardDeck>\n      <Form>\n        <Form.Group controlId=\"formGroupSearch\">\n          <Form.Label>Seach a Country (capitalize first letter, working on a fix)</Form.Label>\n          <Form.Control type=\"text\" className=\"search\" placeholder=\"Search a Country\" onChange={e => setSearchCountries(e.target.value)} />\n        </Form.Group>\n      </Form>\n      <Columns queries={queries}>\n        {countries}\n      </Columns>\n      <div id=\"#donate\">\n      <Route exact path=\"/donate\" component={donate} />\n      </div>\n      </Container>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}